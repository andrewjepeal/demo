<?xml version="1.0" encoding="UTF-8"?>
<testscenario:testscenario xmlns:listructure="http://www.compuware.com/model/xml/listructure" xmlns:properties="http://www.compuware.com/model/xml/properties" xmlns:testcase="http://www.compuware.com/model/xml/testcase" xmlns:testscenario="http://www.compuware.com/model/xml/testscenario" alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Scenario2.testscenario">
  <testscenario:description></testscenario:description>
  <testscenario:testcases>
    <testscenario:testcase alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Scenario2.testscenario%23CWXTSUBCCase1">
      <testcase:description></testcase:description>
      <testcase:interface>../Interfaces/CWXTSUBC.interface#Unit%20Test/Interfaces/CWXTSUBC.interface</testcase:interface>
      <testcase:input listructure="../Structures/CWXTSUBC_EMP-TYPE.listructure#Unit%20Test/Structures/CWXTSUBC_EMP-TYPE.listructure">
        <testcase:data baseType="listructure:stringType ../Structures/CWXTSUBC_EMP-TYPE.listructure#EMP_TYPE.EMP_TYPE" id="input.arg0.EMP_TYPE.EMP_TYPE">
          <properties:properties>
            <properties:property name="value" type="string">S</properties:property>
            <properties:property name="index" type="string">input.arg0.EMP_TYPE.EMP_TYPE</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_SALES-AMOUNT.listructure#Unit%20Test/Structures/CWXTSUBC_SALES-AMOUNT.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_SALES-AMOUNT.listructure#SALES_AMOUNT.SALES_AMOUNT" id="input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <properties:properties>
            <properties:property name="value" type="number">55000.00</properties:property>
            <properties:property name="index" type="string">input.arg1.SALES_AMOUNT.SALES_AMOUNT</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_COMM-TOTAL.listructure#Unit%20Test/Structures/CWXTSUBC_COMM-TOTAL.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_COMM-TOTAL.listructure#COMM_TOTAL.COMM_TOTAL" id="input.arg2.COMM_TOTAL.COMM_TOTAL">
          <properties:properties>
            <properties:property name="value" type="number">0</properties:property>
            <properties:property name="index" type="string">input.arg2.COMM_TOTAL.COMM_TOTAL</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:checkconditions>
        <testcase:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/>
        <testcase:simpleCheckcondition message="Check for EMP_TYPE failed" name="Check for EMP_TYPE" refData="#input.arg0.EMP_TYPE.EMP_TYPE">
          <testcase:expression>'S' eq output.arg0.EMP_TYPE.EMP_TYPE</testcase:expression>
          <testcase:expectation assert="=" type="string">S</testcase:expectation>
        </testcase:simpleCheckcondition>
        <testcase:simpleCheckcondition message="Check for SALES_AMOUNT failed" name="Check for SALES_AMOUNT" refData="#input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <testcase:expression>BigDecimalCreator.make('55000.00').compareTo(output.arg1.SALES_AMOUNT.SALES_AMOUNT) eq 0</testcase:expression>
          <testcase:expectation assert="=" type="number">55000.00</testcase:expectation>
        </testcase:simpleCheckcondition>
        <testcase:simpleCheckcondition message="Check for COMM_TOTAL failed" name="Check for COMM_TOTAL" refData="#input.arg2.COMM_TOTAL.COMM_TOTAL">
          <testcase:expression>BigDecimalCreator.make('3300.00').compareTo(output.arg2.COMM_TOTAL.COMM_TOTAL) eq 0</testcase:expression>
          <testcase:expectation assert="=" type="number">3300.00</testcase:expectation>
        </testcase:simpleCheckcondition>
      </testcase:checkconditions>
      <testcase:stubs/>
    </testscenario:testcase>
    <testscenario:testcase alias="" id="Unit%20Test/Scenarios/CWXTSUBC_Scenario2.testscenario%23CWXTSUBCCase2">
      <testcase:description></testcase:description>
      <testcase:interface>../Interfaces/CWXTSUBC.interface#Unit%20Test/Interfaces/CWXTSUBC.interface</testcase:interface>
      <testcase:input listructure="../Structures/CWXTSUBC_EMP-TYPE.listructure#Unit%20Test/Structures/CWXTSUBC_EMP-TYPE.listructure">
        <testcase:data baseType="listructure:stringType ../Structures/CWXTSUBC_EMP-TYPE.listructure#EMP_TYPE.EMP_TYPE" id="input.arg0.EMP_TYPE.EMP_TYPE">
          <properties:properties>
            <properties:property name="value" type="string">S</properties:property>
            <properties:property name="index" type="string">input.arg0.EMP_TYPE.EMP_TYPE</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_SALES-AMOUNT.listructure#Unit%20Test/Structures/CWXTSUBC_SALES-AMOUNT.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_SALES-AMOUNT.listructure#SALES_AMOUNT.SALES_AMOUNT" id="input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <properties:properties>
            <properties:property name="value" type="number">70000.00</properties:property>
            <properties:property name="index" type="string">input.arg1.SALES_AMOUNT.SALES_AMOUNT</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:input listructure="../Structures/CWXTSUBC_COMM-TOTAL.listructure#Unit%20Test/Structures/CWXTSUBC_COMM-TOTAL.listructure">
        <testcase:data baseType="listructure:numberType ../Structures/CWXTSUBC_COMM-TOTAL.listructure#COMM_TOTAL.COMM_TOTAL" id="input.arg2.COMM_TOTAL.COMM_TOTAL">
          <properties:properties>
            <properties:property name="value" type="number">0</properties:property>
            <properties:property name="index" type="string">input.arg2.COMM_TOTAL.COMM_TOTAL</properties:property>
          </properties:properties>
        </testcase:data>
      </testcase:input>
      <testcase:checkconditions>
        <testcase:complexCheckcondition message="Complex check condition failed" name="Complex check condition"/>
        <testcase:simpleCheckcondition message="Check for EMP_TYPE failed" name="Check for EMP_TYPE" refData="#input.arg0.EMP_TYPE.EMP_TYPE">
          <testcase:expression>'S' eq output.arg0.EMP_TYPE.EMP_TYPE</testcase:expression>
          <testcase:expectation assert="=" type="string">S</testcase:expectation>
        </testcase:simpleCheckcondition>
        <testcase:simpleCheckcondition message="Check for SALES_AMOUNT failed" name="Check for SALES_AMOUNT" refData="#input.arg1.SALES_AMOUNT.SALES_AMOUNT">
          <testcase:expression>BigDecimalCreator.make('70000.00').compareTo(output.arg1.SALES_AMOUNT.SALES_AMOUNT) eq 0</testcase:expression>
          <testcase:expectation assert="=" type="number">70000.00</testcase:expectation>
        </testcase:simpleCheckcondition>
        <testcase:simpleCheckcondition message="Check for COMM_TOTAL failed" name="Check for COMM_TOTAL" refData="#input.arg2.COMM_TOTAL.COMM_TOTAL">
          <testcase:expression>BigDecimalCreator.make('5600.00').compareTo(output.arg2.COMM_TOTAL.COMM_TOTAL) eq 0</testcase:expression>
          <testcase:expectation assert="=" type="number">5600.00</testcase:expectation>
        </testcase:simpleCheckcondition>
      </testcase:checkconditions>
      <testcase:stubs/>
    </testscenario:testcase>
  </testscenario:testcases>
</testscenario:testscenario>